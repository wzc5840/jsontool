//
//  WZC_DataModalParser.m
//  IXcodeTool
//
//  Created by Symond on 14-4-24.
//  Copyright (c) 2014年 WZC. All rights reserved.
//

#import "WZC_DataModalParser.h"

@interface WZC_DataModalParser ()

/**
*  根据指定路径创建文件
*
*  @param strPath 路径
*  @param cn      生成的类的名字
*  @param dic    JSON数据字典
*
*  @return 创建成功返回YES 否则返回NO
*/
- (BOOL)createFileWithPath:(NSString *)strPath withClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic;

/**
 *  生成类的头文件数据
 *
 *  @param cn     生成的类名
 *  @param exName 生成的类的父类的名称
 *  @param dic    JSON数据字典
 *
 *  @return 返回生成的类的数据 如果为nil就是出错
 */
- (NSData *)makeHDataWithClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic;

/**
 *  生成类的实现文件的数据
 *
 *  @param cn     生成的类名
 *  @param exName 生成的类的父类的名称
 *  @param dic    JSON数据字典
 *
 *  @return 返回生成的类的数据 如果为nil就是出错
 */
- (NSData *)makeMDataWithClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic;


@end


@implementation WZC_DataModalParser

static WZC_DataModalParser *sharedInst = nil;


+ (WZC_DataModalParser *)getInstance
{
    if ( sharedInst == nil ) {
        sharedInst = [[self alloc] init];
    }
    return sharedInst;
}

- (id)init{
    
    if ( sharedInst != nil ){
        
    }else if(self = [super init]){
        sharedInst = self;
        [self restore];
    }
    return sharedInst;
}

- (NSString *)makeDefaultHeaderWithClassName:(NSString *)cn withExternName:(NSString *)exName{
    NSDate *now = [NSDate date];
    NSDateFormatter *formatter =[[NSDateFormatter alloc] init];
    [formatter setTimeStyle:NSDateFormatterMediumStyle];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit | NSHourCalendarUnit |
    NSMinuteCalendarUnit | NSSecondCalendarUnit;
    comps = [calendar components:unitFlags fromDate:now];
    //NSInteger week = [comps weekday];
    NSInteger year=[comps year];
    NSInteger month = [comps month];
    NSInteger day = [comps day];
    
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    //NSString *app_Name = [infoDictionary objectForKey:@"CFBundleDisplayName"];
    NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    //NSString *app_build = [infoDictionary objectForKey:@"CFBundleVersion"];
    
    NSString *str = [[NSString alloc] initWithFormat:@"//\r//  %@%@\r//\r//  Automatically Generated by IXcodeTool v%@ on %ld-%ld-%ld.\r//\r//  Copyright (c) %ld年 IXcodeTool. All rights reserved.\r//",cn,exName,app_Version,year,month,day,year];
    
    return str;
}

- (NSData *)makeBaseHDataWithClassName:(NSString *)cn withExternName:(NSString *)exName{
    
    NSString *strHeader = [self makeDefaultHeaderWithClassName:cn withExternName:exName];
    
    NSMutableString *str = [[NSMutableString alloc] initWithString:strHeader];
    
    [str appendString:@"\r\r\r\r#import <Foundation/Foundation.h>\r"];
    [str appendString:@"#import <objc/runtime.h>\r"];
    [str appendString:@"#import <objc/message.h>\r"];
    [str appendString:@"#import <Foundation/NSObject.h>\r"];
    [str appendString:@"#import <Foundation/NSObjCRuntime.h>\r"];
    
    [str appendFormat:@"\r@interface %@ : NSObject",cn];
    [str appendString:@"\r{"];
    [str appendString:@"\r    NSMutableDictionary *_arrKeyDic;"];
    [str appendString:@"\r    NSMutableDictionary *_dicKeyDic;"];
    [str appendString:@"\r    NSMutableDictionary *_runtimeClassNameDic;"];
    [str appendString:@"\r}\r\r"];
    
    //[str appendString:@"\r- (void)setAttributeData:(NSDictionary *)dicData;"];
    [str appendString:@"\r- (NSString *)dataToShow;"];
    [str appendString:@"\r- (NSString *)stringIdToShow;"];
    [str appendString:@"\r- (int)intIdToShow;"];
    [str appendString:@"\r- (id)initWithDataDic:(NSDictionary *)data;"];
    [str appendString:@"\r\r@end"];
    
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];
}

- (NSData *)makeBaseMDataWithClassName:(NSString *)cn withExternName:(NSString *)exName
{
    NSString *strHeader = [self makeDefaultHeaderWithClassName:cn withExternName:exName];
    NSMutableString *str = [[NSMutableString alloc] initWithString:strHeader];
    
    [str appendFormat:@"\r\r\r\r#import \"%@.h\"\r",cn];
    [str appendFormat:@"\r\r@implementation %@\r",cn];
    [str appendString:@"\r\r- (BOOL)isEmptyObj:(id)obj"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSNull *nul = (NSNull *)obj;"];
    [str appendString:@"\r      if(nul == [NSNull null])"];
    [str appendString:@"\r          return YES;"];
    [str appendString:@"\r      else"];
    [str appendString:@"\r          return NO;"];
    [str appendString:@"\r}\r\r"];
    
    [str appendString:@"- (NSDictionary *)setAttributeDictionary"];
    [str appendString:@"\r{"];
    [str appendString:@"\r//  属性KEY  JSON KEY"];
    [str appendString:@"\r      return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (void)setAttributeData:(NSDictionary *)dicData"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSDictionary *dic = [self setAttributeDictionary];"];
    [str appendString:@"\r      NSArray *arrSelfkey = [dic allValues];"];
    [str appendString:@"\r      NSArray *arrDataKey = [dic allKeys];"];
    [str appendString:@"\r      NSInteger intArrAcount = [arrSelfkey count];"];
    [str appendString:@"\r      for (NSInteger i = 0; i < intArrAcount; i++){"];
    [str appendString:@"\r          id val = [dicData objectForKey:[arrDataKey objectAtIndex:i]];"];
    [str appendString:@"\r          id key = [arrSelfkey objectAtIndex:i];"];
    [str appendString:@"\r          if(nil != val){"];
    [str appendString:@"\r              if(NO == [self isEmptyObj:val]){"];
    [str appendString:@"\r                  [self setValue:val forKey:key];"];
    [str appendString:@"\r              }"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r\r            //NSString *str = [NSString stringWithFormat:@\"\\r\\n%@     %@\",[dicData objectForKey:[arrDataKey objectAtIndex:i]],[arrSelfkey objectAtIndex:i]];"];
    [str appendString:@"\r            //NSLog(@\"%@\",str);"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSDictionary *)getCommonDic:(NSDictionary *)dic{"];
    [str appendString:@"\r      NSArray *values = [dic allValues];"];
    [str appendString:@"\r      NSArray *keys = [dic allKeys];"];
    [str appendString:@"\r      NSInteger objCount = [keys count];"];
    [str appendString:@"\r      NSMutableDictionary *commonDic = [[NSMutableDictionary alloc] init];"];
    [str appendString:@"\r      for (NSInteger i = 0; i < objCount; i++){"];
    [str appendString:@"\r          id valObj = [values objectAtIndex:i];"];
    [str appendString:@"\r          id key = [keys objectAtIndex:i];"];
    [str appendString:@"\r          if(NO == [self isEmptyObj:valObj]){"];
    [str appendString:@"\r              if([valObj isKindOfClass:[NSDictionary class]]){"];
    [str appendString:@"\r                  NSDictionary *tempDic = (NSDictionary *)valObj;"];
    [str appendString:@"\r                  if(tempDic.count > 0){"];
    [str appendString:@"\r                      [_dicKeyDic setObject:valObj forKey:key];"];
    [str appendString:@"\r                  }"];
    [str appendString:@"\r              }else if([valObj isKindOfClass:[NSArray class]]){"];
    [str appendString:@"\r                  NSArray *tempArray = (NSArray *)valObj;"];
    [str appendString:@"\r                  if(tempArray.count > 0){"];
    [str appendString:@"\r                      [_arrKeyDic setObject:valObj forKey:key];"];
    [str appendString:@"\r                  }"];
    [str appendString:@"\r              }else{"];
    [str appendString:@"\r                  [commonDic setValue:valObj forKey:key];"];
    [str appendString:@"\r              }"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r      return commonDic;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (id)initWithDataDic:(NSDictionary*)data"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      if(self = [self init]){"];
    [str appendString:@"\r          _arrKeyDic = [[NSMutableDictionary alloc] init];"];
    [str appendString:@"\r          _dicKeyDic = [[NSMutableDictionary alloc] init];"];
    [str appendString:@"\r          NSDictionary *d = [self getCommonDic:data];"];
    [str appendString:@"\r          [self setAttributeData:d];"];
    [str appendString:@"\r          if(_arrKeyDic.count > 0){"];
    [str appendString:@"\r              [self makeArrayModel];"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r          if(_dicKeyDic.count > 0){"];
    [str appendString:@"\r              [self makeDicModel];"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r  return self;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (void)initData{\r"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)converKeyToKey:(NSString *)oldKey{"];
    [str appendString:@"\r      //返回的是属性key"];
    [str appendString:@"\r      return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (void)makeDicModel{"];
    [str appendString:@"\r      NSArray *values = [_dicKeyDic allValues];"];
    [str appendString:@"\r      NSArray *keys = [_dicKeyDic allKeys];"];
    [str appendString:@"\r      NSInteger objCount = [keys count];"];
    [str appendString:@"\r      for(int i=0 ;i<objCount; i++){"];
    [str appendString:@"\r          NSString *strKey = [keys objectAtIndex:i];"];
    [str appendString:@"\r          NSString *strTempKey = [self converKeyToKey:strKey];"];
    [str appendString:@"\r          NSString *strSetKey = strTempKey == nil?strKey:strTempKey;"];
    [str appendString:@"\r          NSDictionary *valueDic = [values objectAtIndex:i];"];
    [str appendString:@"\r          NSString *strClassName = [_runtimeClassNameDic objectForKey:strSetKey];"];
    [str appendString:@"\r          if(nil != strClassName){"];
    [str appendString:@"\r              Class cl = NSClassFromString(strClassName);"];
    [str appendString:@"\r              SEL initSel = NSSelectorFromString(@\"initWithDataDic:\");"];
    [str appendString:@"\r              id classObj = [cl alloc];"];
    [str appendString:@"\r              IMP imp = [classObj methodForSelector:initSel];"];
    [str appendString:@"\r              id (*func)(id, SEL,NSDictionary*) = (id (*)(id, SEL,NSDictionary*))imp;"];
    [str appendString:@"\r              id dataObj = func(classObj,initSel,valueDic);"];
    [str appendString:@"\r              [self setValue:dataObj forKey:strSetKey];"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (void)makeArrayModel{"];
    [str appendString:@"\r      NSArray *values = [_arrKeyDic allValues];"];
    [str appendString:@"\r      NSArray *keys = [_arrKeyDic allKeys];"];
    [str appendString:@"\r      NSInteger objCount = [keys count];"];
    [str appendString:@"\r      for(int i=0 ;i<objCount; i++){"];
    [str appendString:@"\r          NSString *strKey = [keys objectAtIndex:i];"];
    [str appendString:@"\r          NSString *strTempKey = [self converKeyToKey:strKey];"];
    [str appendString:@"\r          NSString *strSetKey = strTempKey == nil?strKey:strTempKey;"];
    [str appendString:@"\r          NSArray *arrValue = [values objectAtIndex:i];"];
    [str appendString:@"\r          NSMutableArray *arr = [self valueForKey:strSetKey];"];
    [str appendString:@"\r          NSString *strClassName = [_runtimeClassNameDic objectForKey:strSetKey];"];
    [str appendString:@"\r          if(nil != strClassName){"];
    [str appendString:@"\r              Class cl = NSClassFromString(strClassName);"];
    [str appendString:@"\r              SEL initSel = NSSelectorFromString(@\"initWithDataDic:\");"];
    [str appendString:@"\r              for (int j=0;j<arrValue.count;j++){"];
    [str appendString:@"\r                  NSDictionary *arrValueDic = [arrValue objectAtIndex:j];"];
    [str appendString:@"\r                  id classObj = [cl alloc];"];
    [str appendString:@"\r                  IMP imp = [classObj methodForSelector:initSel];"];
    [str appendString:@"\r                  id (*func)(id, SEL,NSDictionary*) = (id (*)(id, SEL,NSDictionary*))imp;"];
    [str appendString:@"\r                  id dataObj = func(classObj,initSel,arrValueDic);"];
    [str appendString:@"\r                  [arr addObject:dataObj];"];
    [str appendString:@"\r              }"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)dataToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)stringIdToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (int)intIdToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      return 0;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (instancetype)init"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      self = [super init];"];
    [str appendString:@"\r      if (self) {"];
    [str appendString:@"\r          _runtimeClassNameDic = [[NSMutableDictionary alloc] init];"];
    [str appendString:@"\r          [self initData];"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r      return self;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (void)dealloc"];
    [str appendString:@"\r{"];
    [str appendString:@"\r"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)description"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      return @\"\";"];
    [str appendString:@"\r}"];
    
    
    [str appendString:@"\r\r@end"];
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];
}


- (BOOL)makeBaseFileToPath:(NSString *)strPath{
    
    BOOL beCreateH = [self createBaseFileWithPath:strPath withClassName:@"BaseDataModel" withExternName:@".h"];
    BOOL beCreateM = [self createBaseFileWithPath:strPath withClassName:@"BaseDataModel" withExternName:@".m"];
    
    if(beCreateH && beCreateM){
        return YES;
    }
    
    NSMutableString *str = [[NSMutableString alloc] init];
    
    if(NO == beCreateH){
        
        [str appendString:@"Create Header "];
        
//        [NSAlert alertWithMessageText:@"Error" defaultButton:@"确定" alternateButton:nil otherButton:nil informativeTextWithFormat:@"Create Header Failed!"];
    }
    if(NO == beCreateM){
        [str appendString:@"& M "];
//        [NSAlert alertWithMessageText:@"Error" defaultButton:@"确定" alternateButton:nil otherButton:nil informativeTextWithFormat:@"Create M Failed!"];
    }
    
    [str appendString:@"Failed!"];
    
    [NSAlert alertWithMessageText:@"Error" defaultButton:@"确定" alternateButton:nil otherButton:nil informativeTextWithFormat:@"%@",str];
    
    return NO;
}

- (NSString *)makeSubClassNameWithClassName:(NSString *)cn withKeyString:(NSString *)strKey{
    //取strKey第一位变成大写
    
    NSString *strNewKey1 = [strKey substringToIndex:1];
    NSString *strNewKey2 = [strKey substringFromIndex:1];
    
    NSString *strNewKey = [strNewKey1 uppercaseString];
    
    return [NSString stringWithFormat:@"%@%@%@",cn,strNewKey,strNewKey2];
}

- (NSString *)makeHClassStringWithClassName:(NSString *)strCn withDic:(NSDictionary *)dic{
    
    //子类
    NSMutableString *strSubClass = [[NSMutableString alloc] init];
    //属性
    NSMutableString *strPerpros = [[NSMutableString alloc] init];
    //class
    NSMutableString *strCls = [[NSMutableString alloc] init];
    //Method
    NSMutableString *strMethods = [[NSMutableString alloc] init];
    //总字符串
    NSMutableString *str = [[NSMutableString alloc] init];
    
    [strCls appendFormat:@"\r@interface %@ : BaseDataModel\r",strCn];
    
    NSArray *allKeys = [dic allKeys];
    NSInteger count = [allKeys count];
    for (int i=0; i<count; i++){
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }else if([key isEqualToString:@"description"]){
            key = @"description1";
        }
        if([tempVal isKindOfClass:[NSNumber class]]){
            NSNumber *n = (NSNumber *)tempVal;
            const char *p = [n objCType];
            if(0 == strcmp("d", p)){
                strItem = [NSString stringWithFormat:@"\r@property (nonatomic, assign) double %@;",key];
            }else if(0 == strcmp("q", p)){
                strItem = [NSString stringWithFormat:@"\r@property (nonatomic, assign) long %@;",key];
            }else if(0 == strcmp("c", p)){
                strItem = [NSString stringWithFormat:@"\r@property (nonatomic, assign) BOOL %@;",key];
            }
        }else if([tempVal isKindOfClass:[NSDictionary class]]){
            NSString *strDicName = [self makeSubClassNameWithClassName:strCn withKeyString:key];
            strItem = [NSString stringWithFormat:@"\r@property (nonatomic, retain) %@ *%@;",strDicName,key];
            //继续生成新类
            NSString *strNewDicClass = [self makeHClassStringWithClassName:strDicName withDic:tempVal];
            [strSubClass appendString:strNewDicClass];
            
        }else if([tempVal isKindOfClass:[NSArray class]]){
            //继续生成新类
            NSString *strDicName = [self makeSubClassNameWithClassName:strCn withKeyString:key];
            strItem = [NSString stringWithFormat:@"\r@property (nonatomic, retain) NSMutableArray *%@;",key];
            NSArray *tempArray = (NSArray *)tempVal;
            if(tempArray.count > 0){
                //取出一个对像看看是什么
                id tmpObj = [tempArray objectAtIndex:0];
                if([tmpObj isKindOfClass:[NSDictionary class]]){
                    NSString *strNewDicClass = [self makeHClassStringWithClassName:strDicName withDic:tmpObj];
                    [strSubClass appendString:strNewDicClass];
                }
                //FIXME:还没考虑数组里还是数组的情况 [[],[],[]]
            }
        }else{
            strItem = [NSString stringWithFormat:@"\r@property (nonatomic, retain) NSString *%@;",key];
        }
        if(nil != strItem){
            [strPerpros appendString:strItem];
        }
    }
    
    //拼接方法
//    [strMethods appendString:@"\r- (void)setAttributeData:(NSDictionary *)dicData;"];
//    [strMethods appendString:@"\r- (NSString *)dataToShow;"];
//    [strMethods appendString:@"\r- (NSString *)stringIdToShow;"];
//    [strMethods appendString:@"\r- (int)intIdToShow;"];
//    [strMethods appendString:@"\r- (id)initWithDataDic:(NSDictionary *)data;"];
    
    
    [strMethods appendString:@"\r\r@end"];
    
    
    [str appendString:strSubClass];
    [str appendString:@"\r\r"];
    [str appendString:strCls];
    [str appendString:strPerpros];
    [str appendString:strMethods];
    
    return str;
}

- (NSString *)makeMClassStringWithClassName:(NSString *)strCn withDic:(NSDictionary *)dic{
    
    //子类
    NSMutableString *strSubClass = [[NSMutableString alloc] init];
    //class
    NSMutableString *strCls = [[NSMutableString alloc] init];
    //Method
    NSMutableString *strMethods = [[NSMutableString alloc] init];
    //initData Method
    NSMutableString *strInitMethods = [[NSMutableString alloc] init];
    //dealloc Method
    NSMutableString *strDeallocMethods = [[NSMutableString alloc] init];
    //Description Method
    NSMutableString *strDescriptionMethods = [[NSMutableString alloc] init];
    //Description Method
    NSMutableString *strDescriptionFormat = [[NSMutableString alloc] init];
    // Method
    NSMutableString *strDicObjsKeysHeaders = [[NSMutableString alloc] init];
    // Method
    NSMutableString *strDicObjsKeys = [[NSMutableString alloc] init];
    //encodeWithCoder
    NSMutableString *strEncodeMethods = [[NSMutableString alloc] init];
    //decodeWithCoder
    NSMutableString *strDecodeMethods = [[NSMutableString alloc] init];
    //总字符串
    NSMutableString *str = [[NSMutableString alloc] init];
    
    [strCls appendFormat:@"\r\r@implementation %@\r",strCn];
    
    [strEncodeMethods appendString:@"\r\r- (void)encodeWithCoder:(NSCoder *)aCoder"];
    [strEncodeMethods appendString:@"\r{"];
    
    [strDecodeMethods appendString:@"\r\r- (id)initWithCoder:(NSCoder *)aDecoder"];
    [strDecodeMethods appendString:@"\r{"];
    
    [strDicObjsKeysHeaders appendString:@"\r\r- (NSDictionary *)setAttributeDictionary"];
    [strDicObjsKeysHeaders appendString:@"\r{"];
    [strDicObjsKeysHeaders appendString:@"\r//  属性KEY  JSON KEY"];
    [strDicObjsKeysHeaders appendString:@"\r      NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:"];
    
    NSArray *allKeys = [dic allKeys];
    NSInteger count = [allKeys count];
    for (int i=0; i<count; i++){
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        id perKey = key;
        if([key isEqualToString:@"id"]){
            perKey = @"ID";
        }else if([key isEqualToString:@"description"]){
            perKey = @"description1";
        }
        if([tempVal isKindOfClass:[NSNumber class]]){
            strItem = [NSString stringWithFormat:@"\r\t\t\t\t\t\t  @\"%@\",@\"%@\",",perKey,key];
            
            NSNumber *n = (NSNumber *)tempVal;
            const char *p = [n objCType];
            if(0 == strcmp("d", p)){
                //double
                [strDescriptionMethods appendFormat:@"\\r    %@ : %%f",perKey];
                [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:[NSNumber numberWithDouble:self.%@] forKey:@\"%@\"];",perKey,perKey];
                [strDecodeMethods appendFormat:@"\r     self.%@ = [[aDecoder decodeObjectForKey:@\"%@\"] doubleValue];",perKey,perKey];
            }else if(0 == strcmp("q", p)){
                //long
                [strDescriptionMethods appendFormat:@"\\r    %@ : %%ld",perKey];
                [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:[NSNumber numberWithLong:self.%@] forKey:@\"%@\"];",perKey,perKey];
                [strDecodeMethods appendFormat:@"\r     self.%@ = [[aDecoder decodeObjectForKey:@\"%@\"] longValue];",perKey,perKey];
            }else if(0 == strcmp("c", p)){
                //BOOL
                [strDescriptionMethods appendFormat:@"\\r    %@ : %%d",perKey];
                [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:[NSNumber numberWithBool:self.%@] forKey:@\"%@\"];",perKey,perKey];
                [strDecodeMethods appendFormat:@"\r     self.%@ = [[aDecoder decodeObjectForKey:@\"%@\"] boolValue];",perKey,perKey];
            }
            
            [strDescriptionFormat appendFormat:@"self.%@",perKey];
            
        }else if([tempVal isKindOfClass:[NSDictionary class]]){
            NSString *strDicName = [self makeSubClassNameWithClassName:strCn withKeyString:perKey];
            [strInitMethods appendFormat:@"\r      [_runtimeClassNameDic setObject:@\"%@\" forKey:@\"%@\"];",strDicName,perKey];
            [strDeallocMethods appendFormat:@"\r     self.%@ = nil;",perKey];
            [strDescriptionMethods appendFormat:@"\\r    %@ : %%@",perKey];
            [strDescriptionFormat appendFormat:@"self.%@",perKey];
            [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:self.%@ forKey:@\"%@\"];",perKey,perKey];
            [strDecodeMethods appendFormat:@"\r     self.%@ = [aDecoder decodeObjectForKey:@\"%@\"];",perKey,perKey];
            
            //继续生成新类
            NSString *strNewDicClass = [self makeMClassStringWithClassName:strDicName withDic:tempVal];
            [strSubClass appendString:strNewDicClass];
        }else if([tempVal isKindOfClass:[NSArray class]]){
            NSString *strDicName = [self makeSubClassNameWithClassName:strCn withKeyString:perKey];
            [strInitMethods appendFormat:@"\r      [_runtimeClassNameDic setObject:@\"%@\" forKey:@\"%@\"];",strDicName,perKey];
            [strInitMethods appendFormat:@"\r      _%@ = [[NSMutableArray alloc] init];",perKey];
            [strDeallocMethods appendFormat:@"\r     self.%@ = nil;",perKey];
            [strDescriptionMethods appendFormat:@"\\r    %@ : %%@",perKey];
            [strDescriptionFormat appendFormat:@"self.%@",perKey];
            [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:self.%@ forKey:@\"%@\"];",perKey,perKey];
            [strDecodeMethods appendFormat:@"\r     self.%@ = [aDecoder decodeObjectForKey:@\"%@\"];",perKey,perKey];
            
            NSArray *tempArray = (NSArray *)tempVal;
            if(tempArray.count > 0){
                //取出一个对像看看是什么
                id tmpObj = [tempArray objectAtIndex:0];
                if([tmpObj isKindOfClass:[NSDictionary class]]){
                    NSString *strNewDicClass = [self makeMClassStringWithClassName:strDicName withDic:tmpObj];
                    [strSubClass appendString:strNewDicClass];
                }
                //FIXME:还没考虑数组里还是数组的情况 [[],[],[]]
            }
            
        }else{
            strItem = [NSString stringWithFormat:@"\r\t\t\t\t\t\t  @\"%@\",@\"%@\",",perKey,key];
            [strDeallocMethods appendFormat:@"\r     self.%@ = nil;",perKey];
            [strDescriptionMethods appendFormat:@"\\r    %@ : %%@",perKey];
            [strDescriptionFormat appendFormat:@"self.%@",perKey];
            [strEncodeMethods appendFormat:@"\r     [aCoder encodeObject:self.%@ forKey:@\"%@\"];",perKey,perKey];
            [strDecodeMethods appendFormat:@"\r     self.%@ = [aDecoder decodeObjectForKey:@\"%@\"];",perKey,perKey];
        }
        
        if(i != (count - 1)){
            [strDescriptionFormat appendString:@","];
        }
        
        if(nil != strItem){
            [strDicObjsKeys appendString:strItem];
        }
    }
    
    [strMethods appendString:strEncodeMethods];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:strDecodeMethods];
    [strMethods appendString:@"\r\r     return self;"];
    [strMethods appendString:@"\r}"];
    
    if(strDicObjsKeys.length > 0){
        [strMethods appendString:strDicObjsKeysHeaders];
        [strMethods appendString:strDicObjsKeys];
        [strMethods appendString:@"\r\t\t\t\t\t\t  nil];"];
        [strMethods appendString:@"\r\t  return dic;"];
        [strMethods appendString:@"\r}"];
    }
    
    [strMethods appendString:@"\r\r- (NSString *)converKeyToKey:(NSString *)oldKey{"];
    [strMethods appendString:@"\r      //返回的是属性key"];
    [strMethods appendString:@"\r      return nil;"];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (void)initData{"];
    [strMethods appendString:@"      "];
    [strMethods appendString:strInitMethods];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (NSString *)dataToShow"];
    [strMethods appendString:@"\r{"];
    [strMethods appendString:@"\r      return nil;"];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (NSString *)stringIdToShow"];
    [strMethods appendString:@"\r{"];
    [strMethods appendString:@"\r      return nil;"];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (int)intIdToShow"];
    [strMethods appendString:@"\r{"];
    [strMethods appendString:@"\r      return 0;"];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (void)dealloc"];
    [strMethods appendString:@"\r{"];
    [strMethods appendString:strDeallocMethods];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r- (NSString *)description"];
    [strMethods appendString:@"\r{"];
    [strMethods appendString:@"\r      NSString *str = [NSString stringWithFormat:@\""];
    [strMethods appendString:@"\\r    super = %@"];
    
    [strMethods appendString:strDescriptionMethods];
    [strMethods appendString:@"\","];
    [strMethods appendString:@"[super description],"];
    [strMethods appendString:strDescriptionFormat];
    
    [strMethods appendString:@"];"];
    [strMethods appendString:@"\r      return str;"];
    [strMethods appendString:@"\r}"];
    
    [strMethods appendString:@"\r\r@end"];
    
    [str appendString:strSubClass];
    [str appendString:@"\r\r"];
    [str appendString:strCls];
    [str appendString:strMethods];
    
    return str;
}

- (NSData *)newMakeHDataWithClassName:(NSString *)cn withDic:(NSDictionary *)dic
{
    NSString *strHeader = [self makeDefaultHeaderWithClassName:cn withExternName:@".h"];
    
    NSMutableString *str = [[NSMutableString alloc] initWithString:strHeader];
    [str appendString:@"\r\r\r\r#import <Foundation/Foundation.h>\r"];
    [str appendString:@"\r#import \"BaseDataModel.h\"\r"];
    
    NSString *strClass = [self makeHClassStringWithClassName:cn withDic:dic];
    
    [str appendString:strClass];
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];
}

- (NSData *)newMakeMDataWithClassName:(NSString *)cn withDic:(NSDictionary *)dic
{
    NSString *strHeader = [self makeDefaultHeaderWithClassName:cn withExternName:@".m"];
    NSMutableString *str = [[NSMutableString alloc] initWithString:strHeader];
    [str appendFormat:@"\r\r\r\r#import \"%@.h\"\r",cn];
    
    
    NSString *strClass = [self makeMClassStringWithClassName:cn withDic:dic];
    
    [str appendString:strClass];
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];
}

- (NSData *)makeHDataWithClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic
{
    NSDate *now = [NSDate date];
    NSDateFormatter *formatter =[[NSDateFormatter alloc] init];
    [formatter setTimeStyle:NSDateFormatterMediumStyle];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit | NSHourCalendarUnit |
    NSMinuteCalendarUnit | NSSecondCalendarUnit;
    comps = [calendar components:unitFlags fromDate:now];
    //NSInteger week = [comps weekday];
    NSInteger year=[comps year];
    NSInteger month = [comps month];
    NSInteger day = [comps day];
    
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    //NSString *app_Name = [infoDictionary objectForKey:@"CFBundleDisplayName"];
    NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    //NSString *app_build = [infoDictionary objectForKey:@"CFBundleVersion"];

    
    NSMutableString *str = [[NSMutableString alloc] initWithFormat:@"//\r//  %@%@\r//\r//  Automatically Generated by IXcodeTool v%@ on %ld-%ld-%ld.\r//\r\
//  Copyright (c) %ld年 IXcodeTool. All rights reserved.\r//",cn,exName,app_Version,year,month,day,year];
    
    [str appendString:@"\r\r\r\r#import <Foundation/Foundation.h>\r"];
    [str appendFormat:@"\r@interface %@ : NSObject\r",cn];
    [str appendString:@"{"];
    NSArray *allKeys = [dic allKeys];
    NSInteger count = [allKeys count];
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        if([tempVal isKindOfClass:[NSNumber class]]){
            NSNumber *n = (NSNumber *)tempVal;
            const char *p = [n objCType];
            if(0 == strcmp("d", p)){
                strItem = [NSString stringWithFormat:@"\r   double _%@;",key];
            }else if(0 == strcmp("q", p)){
                strItem = [NSString stringWithFormat:@"\r   long _%@;",key];
            }
        }else{
            strItem = [NSString stringWithFormat:@"\r   NSString *_%@;",key];
        }
        if(nil != strItem){
            [str appendString:strItem];
        }
    }
    
    [str appendString:@"\r}\r"];
    
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        if([tempVal isKindOfClass:[NSNumber class]]){
            NSNumber *n = (NSNumber *)tempVal;
            const char *p = [n objCType];
            if(0 == strcmp("d", p)){
                strItem = [NSString stringWithFormat:@"\r@property (nonatomic, assign) double %@;",key];
            }else if(0 == strcmp("q", p)){
                strItem = [NSString stringWithFormat:@"\r@property (nonatomic, assign) long %@;",key];
            }
        }else{
            strItem = [NSString stringWithFormat:@"\r@property (nonatomic, retain) NSString *%@;",key];
        }
        if(nil != strItem){
            [str appendString:strItem];
        }
    }
    
    [str appendString:@"\r"];
    [str appendString:@"\r- (void)setAttributeData:(NSDictionary *)dicData;"];
    [str appendString:@"\r- (NSString *)dataToShow;"];
    [str appendString:@"\r- (NSString *)stringIdToShow;"];
    [str appendString:@"\r- (int)intIdToShow;"];
    [str appendString:@"\r- (id)initWithDataDic:(NSDictionary *)data;"];
    [str appendString:@"\r\r@end"];
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];
}

//废弃
- (NSData *)makeMDataWithClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic
{
    NSDate *now = [NSDate date];
    NSDateFormatter *formatter =[[NSDateFormatter alloc] init];
    [formatter setTimeStyle:NSDateFormatterMediumStyle];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit | NSHourCalendarUnit |
    NSMinuteCalendarUnit | NSSecondCalendarUnit;
    comps = [calendar components:unitFlags fromDate:now];
    //NSInteger week = [comps weekday];
    NSInteger year=[comps year];
    NSInteger month = [comps month];
    NSInteger day = [comps day];
    
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    //NSString *app_Name = [infoDictionary objectForKey:@"CFBundleDisplayName"];
    NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    //NSString *app_build = [infoDictionary objectForKey:@"CFBundleVersion"];
    
    NSMutableString *str = [[NSMutableString alloc] initWithFormat:@"//\r//  %@%@\r//\r//  Automatically Generated by IXcodeTool v%@ on %ld-%ld-%ld.\r//\r\
//  Copyright (c) %ld年 IXcodeTool. All rights reserved.\r//",cn,exName,app_Version,year,month,day,year];
    
    [str appendFormat:@"\r\r\r\r#import \"%@.h\"\r",cn];
    [str appendFormat:@"\r\r@implementation %@\r",cn];
    
    NSArray *allKeys = [dic allKeys];
    NSInteger count = [allKeys count];
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        //id tempVal = [dic objectForKey:key];
        strItem = [NSString stringWithFormat:@"\r@synthesize %@ = _%@;",key,key];
        
        if(nil != strItem){
            [str appendString:strItem];
        }
    }
    
    [str appendString:@"\r\r\r\r- (BOOL)isEmptyObj:(id)obj"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSNull *nul = (NSNull *)obj;"];
    [str appendString:@"\r      if(nul == [NSNull null])"];
    [str appendString:@"\r          return YES;"];
    [str appendString:@"\r      else"];
    [str appendString:@"\r          return NO;"];
    [str appendString:@"\r}\r\r"];
    
    [str appendString:@"- (NSDictionary *)setAttributeDictionary"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:"];
    
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id perKey = key;
        if([key isEqualToString:@"id"]){
            perKey = @"ID";
        }
        //id tempVal = [dic objectForKey:key];
        strItem = [NSString stringWithFormat:@"\r\t\t\t\t\t\t  @\"%@\",@\"%@\",",perKey,key];
        if(nil != strItem){
            [str appendString:strItem];
        }
    }
    
    [str appendString:@"\r\t\t\t\t\t\t  nil];"];
    [str appendString:@"\r\t  return dic;"];
    [str appendString:@"\r}"];
    
    
    [str appendString:@"\r\r- (void)setAttributeData:(NSDictionary *)dicData"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSDictionary *dic = [self setAttributeDictionary];"];
    [str appendString:@"\r      NSArray *arrSelfkey = [dic allValues];"];
    [str appendString:@"\r      NSArray *arrDataKey = [dic allKeys];"];
    [str appendString:@"\r      NSInteger intArrAcount = [arrSelfkey count];"];
    [str appendString:@"\r      for (NSInteger i = 0; i < intArrAcount; i++){"];
    [str appendString:@"\r          id val = [dicData objectForKey:[arrDataKey objectAtIndex:i]];"];
    [str appendString:@"\r          id key = [arrSelfkey objectAtIndex:i];"];
    [str appendString:@"\r          if(nil != val){"];
    [str appendString:@"\r              if(NO == [self isEmptyObj:val]){"];
    [str appendString:@"\r                  [self setValue:val forKey:key];"];
    [str appendString:@"\r              }"];
    [str appendString:@"\r          }"];
    [str appendString:@"\r\r            //NSString *str = [NSString stringWithFormat:@\"\\r\\n%@     %@\",[dicData objectForKey:[arrDataKey objectAtIndex:i]],[arrSelfkey objectAtIndex:i]];"];
    [str appendString:@"\r            //NSLog(@\"%@\",str);"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (id)initWithDataDic:(NSDictionary*)data"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      if(self = [self init]){"];
    [str appendString:@"\r          [self setAttributeData:data];"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r  return self;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)dataToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r  return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)stringIdToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r  return nil;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (int)intIdToShow"];
    [str appendString:@"\r{"];
    [str appendString:@"\r  return 0;"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (id)init"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      if(!self){"];
    [str appendString:@"\r          self = [super init];"];
    [str appendString:@"\r      }"];
    [str appendString:@"\r  return self;"];
    [str appendString:@"\r}"];

    [str appendString:@"\r\r- (void)dealloc"];
    [str appendString:@"\r{"];
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        if(![tempVal isKindOfClass:[NSNumber class]]){
            strItem = [NSString stringWithFormat:@"\r      [_%@ release];",key];
            if(nil != strItem){
                [str appendString:strItem];
            }
        }
    }

    [str appendString:@"\r      [super dealloc];"];
    [str appendString:@"\r}"];
    
    [str appendString:@"\r\r- (NSString *)description"];
    [str appendString:@"\r{"];
    [str appendString:@"\r      NSString *str = [NSString stringWithFormat:@\""];
    [str appendString:@"\\r\\tsuper = %@"];
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        if([tempVal isKindOfClass:[NSNumber class]]){
            NSNumber *n = (NSNumber *)tempVal;
            const char *p = [n objCType];
            if(0 == strcmp("d", p)){
                strItem = [NSString stringWithFormat:@"\\r\\t%@ : %%f",key];
            }
        }else{
            strItem = [NSString stringWithFormat:@"\\r\\t%@ : %%@",key];
        }
        if(nil != strItem){
            [str appendString:strItem];
        }
    }
    [str appendString:@"\","];
    [str appendString:@"[super description],"];
    for (int i=0; i<count; i++) {
        NSString *strItem = nil;
        id key = [allKeys objectAtIndex:i];
        //id tempVal = [dic objectForKey:key];
        if([key isEqualToString:@"id"]){
            key = @"ID";
        }
        strItem = [NSString stringWithFormat:@"_%@",key];
        if(nil != strItem){
            [str appendString:strItem];
        }
        if(i != (count - 1)){
            [str appendString:@","];
        }
    }
    [str appendString:@"];"];
    [str appendString:@"\r      return str;"];
    [str appendString:@"\r}"];
    
    
    [str appendString:@"\r\r@end"];
    
    return [str dataUsingEncoding:NSUTF8StringEncoding];

}

- (BOOL)createBaseFileWithPath:(NSString *)strPath withClassName:(NSString *)cn withExternName:(NSString *)exName
{
    NSString *strFileFullPath = [NSString stringWithFormat:@"%@/%@%@",strPath,cn,exName];
    NSLog(@"create file at = %@",strFileFullPath);
    NSData *data = nil;
    if([exName isEqualTo:@".h"]){
        data = [self makeBaseHDataWithClassName:cn withExternName:exName];
    }else if ([exName isEqualTo:@".m"]){
        data = [self makeBaseMDataWithClassName:cn withExternName:exName];
    }
    //NSError *error;
    NSFileManager *f = [NSFileManager defaultManager];
    BOOL beWrite = [f createFileAtPath:strFileFullPath contents:data attributes:nil];
    //BOOL beWrite = [data writeToFile:@"file://Users/admin/Desktop/TestCommonData.h" options:NSDataWritingAtomic error:&error];
    
    return beWrite;
}

- (BOOL)createFileWithPath:(NSString *)strPath withClassName:(NSString *)cn withDic:(NSDictionary *)dic{
    NSString *strFileFullPathH = [NSString stringWithFormat:@"%@/%@%@",strPath,cn,@".h"];
    NSString *strFileFullPathM = [NSString stringWithFormat:@"%@/%@%@",strPath,cn,@".m"];
    NSLog(@"create H file at = %@",strFileFullPathH);
    NSLog(@"create M file at = %@",strFileFullPathM);
    NSData *dataH = nil;
    NSData *dataM = nil;
    
    dataH = [self newMakeHDataWithClassName:cn withDic:dic];
    dataM = [self newMakeMDataWithClassName:cn withDic:dic];
    
    NSFileManager *f = [NSFileManager defaultManager];
    
    BOOL beWriteH = [f createFileAtPath:strFileFullPathH contents:dataH attributes:nil];
    BOOL beWriteM = [f createFileAtPath:strFileFullPathM contents:dataM attributes:nil];
    
    
    if(YES == beWriteH && YES == beWriteM){
        return YES;
    }
    return NO;
    
}

- (BOOL)createFileWithPath:(NSString *)strPath withClassName:(NSString *)cn withExternName:(NSString *)exName withDic:(NSDictionary *)dic
{
    NSString *strFileFullPath = [NSString stringWithFormat:@"%@/%@%@",strPath,cn,exName];
    NSLog(@"create file at = %@",strFileFullPath);
    NSData *data = nil;
    if([exName isEqualTo:@".h"]){
        data = [self makeHDataWithClassName:cn withExternName:exName withDic:dic];
    }else if ([exName isEqualTo:@".m"]){
        data = [self makeMDataWithClassName:cn withExternName:exName withDic:dic];
    }
    //NSError *error;
    NSFileManager *f = [NSFileManager defaultManager];
    BOOL beWrite = [f createFileAtPath:strFileFullPath contents:data attributes:nil];
    //BOOL beWrite = [data writeToFile:@"file://Users/admin/Desktop/TestCommonData.h" options:NSDataWritingAtomic error:&error];

    return beWrite;
}

- (BOOL)createSwiftFileWithPath:(NSString *)strPath withClassName:(NSString *)cn withDic:(NSDictionary *)dic
{
    NSString *strFileFullPath = [NSString stringWithFormat:@"%@/%@.swift",strPath,cn];
    NSLog(@"create file at = %@",strFileFullPath);
    NSData *data = [self makeSwiftDataWithClassName:cn withDic:dic];
//    if([exName isEqualTo:@".h"]){
//        data = [self makeHDataWithClassName:cn withExternName:exName withDic:dic];
//    }else if ([exName isEqualTo:@".m"]){
//        data = [self makeMDataWithClassName:cn withExternName:exName withDic:dic];
//    }
    //NSError *error;
    NSFileManager *f = [NSFileManager defaultManager];
    BOOL beWrite = [f createFileAtPath:strFileFullPath contents:data attributes:nil];
    //BOOL beWrite = [data writeToFile:@"file://Users/admin/Desktop/TestCommonData.h" options:NSDataWritingAtomic error:&error];
    
    return beWrite;
}

- (BOOL)makeFileWithString:(NSString *)strJson writeToPath:(NSString *)strPath withClassName:(NSString *)cn withParentClassName:(NSString *)pcn
{
    NSLog(@"strJson = %@\rstrPath = %@",strJson,strPath);
    NSError *error;
    NSData *resultData = [strJson dataUsingEncoding:NSUTF8StringEncoding];
    //id obj = [[CJSONDeserializer deserializer] deserializeAsDictionary:resultData error:&error];
    id obj = [NSJSONSerialization JSONObjectWithData:resultData options:NSJSONReadingAllowFragments error:&error];
    
    if(nil != obj){
        if([obj isKindOfClass:[NSDictionary class]]){
            
            return  [self createFileWithPath:strPath withClassName:cn withDic:(NSDictionary *)obj];
            
        }
    }
    return NO;
}

//- (BOOL)makeFileWithString:(NSString *)strJson writeToPath:(NSString *)strPath withClassName:(NSString *)cn withParentClassName:(NSString *)pcn
//{
//    NSLog(@"strJson = %@\rstrPath = %@",strJson,strPath);
//    NSError *error;
//    NSData *resultData = [strJson dataUsingEncoding:NSUTF8StringEncoding];
//    //id obj = [[CJSONDeserializer deserializer] deserializeAsDictionary:resultData error:&error];
//    id obj = [NSJSONSerialization JSONObjectWithData:resultData options:NSJSONReadingAllowFragments error:&error];
//    
//    if(nil != obj){
//        if([obj isKindOfClass:[NSDictionary class]]){
//            BOOL beCreateH = [self createFileWithPath:strPath withClassName:cn withExternName:@".h" withDic:(NSDictionary *)obj];
//            BOOL beCreateM = [self createFileWithPath:strPath withClassName:cn withExternName:@".m" withDic:(NSDictionary *)obj];
//            if(beCreateH && beCreateM){
//                return YES;
//            }
//            if(NO == beCreateH){
//                [NSAlert alertWithMessageText:@"Error" defaultButton:@"确定" alternateButton:nil otherButton:nil informativeTextWithFormat:@"Create Header Failed!"];
//            }
//            if(NO == beCreateM){
//                [NSAlert alertWithMessageText:@"Error" defaultButton:@"确定" alternateButton:nil otherButton:nil informativeTextWithFormat:@"Create M Failed!"];
//            }
//        }
//    }
//    return NO;
//}

- (BOOL)makeSwiftFileWithString:(NSString *)strJson writeToPath:(NSString *)strPath withClassName:(NSString *)cn withParentClassName:(NSString *)pcn
{
    NSLog(@"strJson = %@\rstrPath = %@",strJson,strPath);
    NSError *error;
    NSData *resultData = [strJson dataUsingEncoding:NSUTF8StringEncoding];
    //id obj = [[CJSONDeserializer deserializer] deserializeAsDictionary:resultData error:&error];
    id obj = [NSJSONSerialization JSONObjectWithData:resultData options:NSJSONReadingAllowFragments error:&error];
    //先解析JSON对像
    if(nil != obj){
        if([obj isKindOfClass:[NSDictionary class]]){
            //解出字典
            //穿建swift 文件
            BOOL createOK = [self createSwiftFileWithPath:strPath withClassName:cn withDic:(NSDictionary *)obj];
            return createOK;
        }else if([obj isKindOfClass:[NSArray class]]){
            //解出数组
        }
    }
    
    
    return NO;
}

- (NSString *)makeSwiftFileHeaderStringWithClassName:(NSString *)cn
{
    NSDate *now = [NSDate date];
    NSDateFormatter *formatter =[[NSDateFormatter alloc] init];
    [formatter setTimeStyle:NSDateFormatterMediumStyle];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit | NSHourCalendarUnit |
    NSMinuteCalendarUnit | NSSecondCalendarUnit;
    comps = [calendar components:unitFlags fromDate:now];
    //NSInteger week = [comps weekday];
    NSInteger year=[comps year];
    NSInteger month = [comps month];
    NSInteger day = [comps day];
    
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    //NSString *app_Name = [infoDictionary objectForKey:@"CFBundleDisplayName"];
    NSString *app_Version = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    //NSString *app_build = [infoDictionary objectForKey:@"CFBundleVersion"];
    
    NSMutableString *str = [[NSMutableString alloc] initWithFormat:@"//\r//  %@.swift\r//\r//  Automatically Generated by IXcodeTool v%@ on %ld-%ld-%ld.\r//\r//  Copyright (c) %ld年 IXcodeTool. All rights reserved.\r//",cn,app_Version,year,month,day,year];
    
    //import UIKit
    [str appendFormat:@"\r\r\r\rimport import UIKit\r"];
    
    return str;
}

- (NSString *)makeClassNameByKeyName:(NSString *)strKey
{
    NSString *str = [NSString stringWithFormat:@"%@DataModel",[strKey capitalizedString]];
    return str;
}

- (NSString *)makeSwiftClassStringWithClassName:(NSString *)cn withArray:(NSArray *)arr{
    //先判断arr元个数 如果多于一个 取出一个做模型  如果0个，则数据没有元素
    //先制做固定方法
    NSMutableString *upClass = [[NSMutableString alloc]initWithFormat:@"//subclass of %@ \r\r",cn];
    NSString *strCommonMethod = [self makeSwiftCommonMethod];
    NSMutableString *resultStr = [[NSMutableString alloc] initWithFormat:@"\rclass %@ : NSObject {\r",cn];
    
    NSMutableString *parseMethodString = [[NSMutableString alloc] initWithString:@"\r\r    override internal init(){\r\r    }\r\r"];
    [parseMethodString appendString:@"    internal init(jsonDic dic: NSDictionary){\r        super.init();\r        self.dataProcess(dic);    \r    }"];
    [parseMethodString appendString:@"\r"];
    
    [parseMethodString appendString:strCommonMethod];
    
    //构造 dataProcess函数
    [parseMethodString appendString:@"\r\r    override func dataProcess(dic: NSDictionary!) {\r"];
    
    if(arr.count > 0){
        
    }
    
    
    return @"";
}

- (NSString *)makeSwiftClassStringWithClassName:(NSString *)cn withDic:(NSDictionary *)dic
{
    NSMutableString *upClass = [[NSMutableString alloc]initWithFormat:@"//subclass of %@ \r\r",cn];
    NSString *strCommonMethod = [self makeSwiftCommonMethod];
    
    NSMutableString *resultStr = [[NSMutableString alloc] initWithFormat:@"\rclass %@ : NSObject {\r",cn];
    
    NSMutableString *parseMethodString = [[NSMutableString alloc] initWithString:@"\r\r    override internal init(){\r\r    }\r\r"];
    //生成两个初始化函数
    
    //[resultStr appendString:@"\r\r    override internal init(){\r\r    }\r\r"];
    [parseMethodString appendString:@"    internal init(jsonDic dic: NSDictionary){\r        super.init();\r        self.dataProcess(dic);    \r    }"];
    [parseMethodString appendString:@"\r"];
    
    [parseMethodString appendString:strCommonMethod];
    
    //构造 dataProcess函数
    [parseMethodString appendString:@"\r\r    override func dataProcess(dic: NSDictionary!) {\r"];
    
    
        //开始遍历属性
    
        NSArray *allKeys = [dic allKeys];
        NSInteger count = [allKeys count];
        for (int i=0; i<count; i++) {
            NSString *strItem = nil;
            NSString *strItemMethod = nil;
            id key = [allKeys objectAtIndex:i];
            id tempVal = [dic objectForKey:key];
            NSString *strKeyName = (NSString *)key;
            NSObject *obj = (NSObject *)tempVal;
    //        //@"{\"aa\":true,\"bb\":1,\"cc\":1.2,\"dd\":\"hello\",\"ee\":null}"
            NSLog(@"tempVal = %@ type = %@",tempVal,obj.className);
    //        //strItem = [NSString stringWithFormat:@"\r@synthesize %@ = _%@;",key,key];
            
            
            if([tempVal isKindOfClass:[NSNumber class]]){
                NSNumber *n = (NSNumber *)tempVal;
                const char *p = [n objCType];
                if(0 == strcmp("d", p)){
                    //double
                    //生成属性
                    strItem = [NSString stringWithFormat:@"\r    var %@: Double?",key];
                    //生成解析方法
                    strItemMethod = [NSString stringWithFormat:@"\r        self.doubleCheckNullObject(dic[\"%@\"], callBack: {\r            (d:Double) -> Void in\r            self.%@ = d;\r        });",key,key];
                }else if(0 == strcmp("c", p)){
                    //bool
                    //生成属性
                    strItem = [NSString stringWithFormat:@"\r    var %@: Bool?",key];
                    //生成解析方法
                    strItemMethod = [NSString stringWithFormat:@"\r        self.boolCheckNullObject(dic[\"%@\"], callBack: {\r            (be:Bool) -> Void in\r            self.%@ = be;\r        });",key,key];
                }else if(0 == strcmp("q", p)){
                    //long
                    //生成属性
                    strItem = [NSString stringWithFormat:@"\r    var %@: Int?",key];
                    //生成解析方法
                    strItemMethod = [NSString stringWithFormat:@"\r        self.intCheckNullObject(dic[\"%@\"], callBack: {\r            (n:Int) -> Void in\r            self.%@ = n;\r        });",key,key];
                }
            }else if([tempVal isKindOfClass:[NSNull class]]){
                //FIXME: null类型暂时不做处理
                NSLog(@"null类型暂时不做处理");
            }else if([tempVal isKindOfClass:[NSArray class]]){
                
                //先要判断数组元表类型  暂不考虑数组内元素类型不想同的情况
                NSArray *tempArr = (NSArray *)tempVal;
                if(tempArr.count > 0){
                    //取第一个元素判断类型
                    id obj1 = [tempArr objectAtIndex:0];
                    if([obj1 isKindOfClass:[NSNumber class]]){
                        NSNumber *n = (NSNumber *)obj1;
                        const char *p = [n objCType];
                        if(0 == strcmp("d", p)){
                            //double
                            //生成属性
                            strItem = [NSString stringWithFormat:@"\r    var %@: [Double]?",strKeyName];
                            //生成解析方法
                            strItemMethod = [NSString stringWithFormat:@"\r        self.arrayCheckNullObject(dic[\"%@\"], callBack: {\r            (arr:NSArray) -> Void in\r                 \r            var ay:[Double] = [Double]();\r            for item in arr{\r                let obj:Double = item as! Double;\r                        ay.append(da);\r            }\r            self.%@ = ay; \r        });",key,key];
                            
                        }else if(0 == strcmp("c", p)){
                            //bool
                            //生成属性
                            strItem = [NSString stringWithFormat:@"\r    var %@: [Bool]?",strKeyName];
                            //生成解析方法
                            
                        }else if(0 == strcmp("q", p)){
                            //long
                            //生成属性
                            strItem = [NSString stringWithFormat:@"\r    var %@: [Int]?",strKeyName];
                            //生成解析方法

                        }
                    }else if([obj1 isKindOfClass:[NSNull class]]){
                        //FIXME: null类型暂时不做处理
                    }else if([obj1 isKindOfClass:[NSArray class]]){
                        
                    }else if([obj1 isKindOfClass:[NSDictionary class]]){
                        //生成属性
                        NSString *strClassName = [self makeClassNameByKeyName:strKeyName];
                        NSLog(@"strClassName == %@",strClassName);
                        
                        
                        NSString *dicString = [self makeSwiftClassStringWithClassName:strClassName withArray:tempArr];
                        strItem = [NSString stringWithFormat:@"\r    var %@: [%@]?",strKeyName,strClassName];
                        [upClass appendString:dicString];
                        //生成解析方法
                        strItemMethod = [NSString stringWithFormat:@"\r        self.arrayCheckNullObject(dic[\"%@\"], callBack: {\r            (arr:NSArray) -> Void in\r                 \r            var ay:[%@] = [%@]();\r            for item in arr{\r                let d:NSDictionary = item as! NSDictionary;\r                let da:%@ = %@(jsonDic: d);\r                ay.append(da);\r            }\r            self.%@ = ay; \r        });",key,strClassName,strClassName,strClassName,strClassName,key];
                    }else{
                        //string
                    }

                }
                //数组无数据就不做解析了
            }else if([tempVal isKindOfClass:[NSDictionary class]]){
                //生成属性
                NSString *strClassName = [self makeClassNameByKeyName:strKeyName];
                NSLog(@"strClassName == %@",strClassName);
                NSDictionary *tempDic = (NSDictionary *)tempVal;
                NSString *dicString = [self makeSwiftClassStringWithClassName:strClassName withDic:tempDic];
                strItem = [NSString stringWithFormat:@"\r    var %@: %@?",strKeyName,strClassName];
                [upClass appendString:dicString];
                //生成解析方法
                strItemMethod = [NSString stringWithFormat:@"\r        self.dicCheckNullObject(dic[\"%@\"], callBack: {\r            (dic:NSDictionary) -> Void in\r            self.%@ = %@(jsonDic: dic);\r        });",key,key,strClassName];
                
                
            }else{
                //生成属性
                strItem = [NSString stringWithFormat:@"\r    var %@: String?",key];
                //生成解析方法
                strItemMethod = [NSString stringWithFormat:@"\r        self.stringCheckNullObject(dic[\"%@\"], callBack: {\r            (str:String) -> Void in\r            self.%@ = str;\r        });",key,key];
            }
    
            if(nil != strItem){
                [resultStr appendString:strItem];
            }
            if(nil != strItemMethod){
                [parseMethodString appendString:strItemMethod];
            }
            
            
            
        }
    
    
    [parseMethodString appendString:@"\r    }\r"];
    [resultStr appendString:parseMethodString];
    
    
//    //    override internal init(){
//    //
//    //    }
//        [str appendFormat:@"    override internal init(){\r\r    }\r\r"];
//    //    internal init(jsonDic dic: NSDictionary){
//    //        super.init();
//    //        self.dataProcess(dic);
//    //    }
//        [str appendFormat:@"    internal init(jsonDic dic: NSDictionary){\r        super.init();\r        self.dataProcess(dic);    \r}"];
    
    [resultStr appendString:@"\r}\r\r"];
    
    [upClass appendString:@"\r"];
    [upClass appendString:resultStr];
    
    return upClass;
}

- (NSData *)makeSwiftDataWithClassName:(NSString *)cn withDic:(NSDictionary *)dic
{
    NSString *strFileHeader = [self makeSwiftFileHeaderStringWithClassName:cn];
    
    NSMutableString *resultStr = [[NSMutableString alloc] initWithString:strFileHeader];
    
    NSString *str = [self makeSwiftClassStringWithClassName:cn withDic:dic];
    [resultStr appendString:str];

  
    
    return [resultStr dataUsingEncoding:NSUTF8StringEncoding];
}

/**
 *  为类生成一些固定方法 检测值为空的
 *
 *  @return 方法字符串
 */
- (NSString *)makeSwiftCommonMethod
{
    NSMutableString *resultString = [[NSMutableString alloc] initWithString:@"//common method\r\r"];
    //检测string不为空
    [resultString appendString:@"    func stringCheckNullObject(obj:AnyObject?,callBack:((String) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack("");\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! String);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    //检测int不为空
    [resultString appendString:@"    func intCheckNullObject(obj:AnyObject?,callBack:((Int) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack(0);\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! Int);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    //检测bool不为空
    [resultString appendString:@"    func boolCheckNullObject(obj:AnyObject?,callBack:((Bool) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack(false);\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! Bool);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    //检测double不为空
    [resultString appendString:@"    func doubleCheckNullObject(obj:AnyObject?,callBack:((Double) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack(0);\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! Double);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    //检测dic不为空
    [resultString appendString:@"    func dicCheckNullObject(obj:AnyObject?,callBack:((NSDictionary) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack(NSDictionary());\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! NSDictionary);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    //检测arr不为空
    [resultString appendString:@"    func arrayCheckNullObject(obj:AnyObject?,callBack:((NSArray) -> Void)) -> Void{\r"];
    [resultString appendString:@"        if let letObj = obj{\r"];
    [resultString appendString:@"            if letObj as! NSObject == NSNull(){\r"];
    [resultString appendString:@"                callBack(NSArray());\r"];
    [resultString appendString:@"            }else{\r"];
    [resultString appendString:@"                callBack(obj as! NSArray);\r"];
    [resultString appendString:@"            }\r"];
    [resultString appendString:@"        }\r"];
    [resultString appendString:@"    }\r\r"];
    
    
    
    
    return resultString;
}



- (void)restore
{
    
}

- (void)dealloc
{
    
}


@end
